//Nuclear Activation in Deep:
//Author:"Mustafa RABUS";
//Energy cross-section data in csv format taken from the IAEA cross-section database is required.
//You must have the csv file of the relevant reaction ready in the relevant c++ file.
//It gives the nuclear activation values ​​that energetic ions will create in the substance depending on the depth of the target material.
//Outputs are in csv format and activity values ​​are local.
//For gross activity, total activity should be checked.
// https://www.youtube.com/@MstfRbs/videos

#include <iostream>
#include <fstream>
#include <cmath>
#include <string>
#include <sstream>
#include <vector>
using namespace std;

//INPUTS:
int zi=1;//Projectile particle proton count(electrical charge in terms of elemental charge)<--Proton or Deuteron:zi=1 Alpha or Helium3:zi=2.
int Z=30;//Target material atomic number.<--Zni=28,Zcu=29,Zzn=30,Zge=32,Zti=22,Zcd=48
float A=65.38;//Target Material Relative Atomic Mass.(akb) <--Ani=58.693,Acu=63.546,Azn=65.38,Age=72.63,Ati=47.867,Acd=112.41
float mi=938.272;//(MeV)proton projectile particle mass energy value.<--Deuteron:mi=1875.613 Helium3:mi=2809.41 Alpha:mi=3727.38
float d=7133;//(kg/m3) Target material density.<--dni=8.902,dcu=8.960,dzn=7.133,dge=5.323,dti=4540,dcd=8650
float T=12.7*3600;//(seconds)HalfLife.<--Tfe52=8.275*3600,Tas72=26*3600,Tzn62=9.193*3600,Tga66=9.49*3600,Tcr51=27.7010*24*3600,Tcu64=12.7*3600,Tsn117=14*24*3600
float dt=10*T;//(Seconds) Irradiation time.
float dE=0.1; //Step Energy.
float current =1*pow(10,-6);//(1mikroamper-->amper=coulomb/saniye).
int DecayStep=1;// The number of radiations emitted in each decay.
string source="znd64cut.csv";

//CONSTANTS:
float c=3*pow(10,8);//(m/s)light speed.
float me=0.511;//(MeV)electron mass energy equivalent.
float Na=6.022*pow(10,26);//(nucleon/kg)avagadro number.
float re=2.818*pow(10,-15);//(meter)classical electron radius.
float pi=3.14;

//CALCULATIONS:
float Ih=(9.76+58.8*pow(Z,(-1.19)))*Z*pow(10,(-6));//(MeV) Z>=13 Target material ionization potential.
float Il=(12*Z+7)*pow(10,(-6));//(MeV) Z<13 Target material ionization potential.
float Nv=d*Na/A;//(atom/m3) the number of atoms per unit volume of material penetrated by the particle.
float dNx=0;//Number of target material atoms per steps.
float Flux0=(current*pow(10,19)*5/8)/zi;// (Particle/Second.m2) Incident Particle Per Second Per Crosscut.
float bethe=0;
float gamma1=0;
float gamma2=0;
float beta1=0;
float beta2=0;
float dEdx=0;
float dx=0; //Step (m).
float R=0; //Range (m).
float E=0; //Particle Energy (MeV).
float N=0; //Number of Nuclear Interaction.

//FUNCTIONS:
int main (){

    int m=0;
    int dataline=0;
    string scan0;
    ifstream file0(source);
    if (!file0.is_open()) {cerr << "Can't open file\n"; return 1;}
    while (getline(file0, scan0)) {
        stringstream ss(scan0);
        string item;
        while (getline(ss, item, ',')) {if (item == "MeV") {dataline=m;m=-1;break;}}
        m=m+1;
        }
    file0.close();

    int rows=0;
    int data=0;
    string Energy[m];
    string Cross[m];
    string Energyrev[m];
    string Crossrev[m];
    string scan1;
    ifstream file1(source);
    if (!file1.is_open()) {cerr << "Can't open file\n"; return 1;}
    while (getline(file1, scan1)) {
        stringstream ss(scan1);
        string item;
        if (rows>dataline){
            int rowIndex = 0;
            while (getline(ss, item, ',')) {
                if (rowIndex == 0) {Energy[data]=item;}
                if (rowIndex == 1) {Cross[data]=item;}
                rowIndex++;
                }
                data=data+1;
            }
        rows=rows+1;
        }
    file1.close();

    for (int i=0;i<m;i++){Energyrev[m-1-i]=Energy[i];Crossrev[m-1-i]=Cross[i];}
    string Range[m];
    string Activity[m];
    ofstream file2("CERA.csv");
    if (!file2.is_open()) {cerr << "Can't open file\n";return 1;}
    file2 << "CROSSSECTION,ENERGY,RANGE,ACTIVITY\n";
    for (int i=0;i<m;i++) {
        E=stof(Energyrev[i]);
        gamma1=(E+mi)/mi;
        gamma2=pow(((E+mi)/mi),2);
        beta2=1-(1/gamma2);
        beta1=sqrt(beta2);
        bethe=(4*pi*pow(re,2)*pow(zi,2)*me*Nv*Z/beta2);
        if (Z>=13){
            if (mi > 0.511){dEdx=bethe*(log(2*me*beta2*gamma2/Ih)-beta2);}
            else if (zi<0) {dEdx=bethe*(log(beta1*gamma1*sqrt(gamma1-1)*me/Ih)+((pow(gamma1-1,2)/8)+1-log(2)*(gamma2+2*gamma1-1))/(2*gamma2));}
            else {dEdx=bethe*(log(beta1*gamma1*sqrt(gamma1-1)*me/Ih)-(23+14/(gamma1+1)+10/pow(gamma1+1,2)+4/pow(gamma1+1,3)*(beta2/24)+log(2)/2));}
            }
        else if (Z<13){
            if (mi > 0.511){dEdx=bethe*(log(2*me*beta2*gamma2/Il)-beta2);}
            else if (zi<0) {dEdx=bethe*(log(beta1*gamma1*sqrt(gamma1-1)*me/Il)+((pow(gamma1-1,2)/8)+1-log(2)*(gamma2+2*gamma1-1))/(2*gamma2));}
            else {dEdx=bethe*(log(beta1*gamma1*sqrt(gamma1-1)*me/Il)-(23+14/(gamma1+1)+10/pow(gamma1+1,2)+4/pow(gamma1+1,3)*(beta2/24)+log(2)/2));}
            }
        dx = (1/dEdx)*dE;
        R = R+dx;
        dNx = Nv*dx;
        N = N+stof(Crossrev[i])*pow(10,-31)*dNx;
        Range[i] = to_string(R);
        Activity[i] =to_string(DecayStep*(log(2)/T)*Flux0*exp(-N)*stof(Crossrev[i])*pow(10,-31)*dNx*(exp(-Flux0*exp(-N)*stof(Crossrev[i])*pow(10,-31)*dt)-exp(-(log(2)/T)*dt))/((log(2)/T)-Flux0*exp(-N)*stof(Crossrev[i])*pow(10,-31)));
        file2 << Crossrev[i] <<","<< Energyrev[i] <<","<< Range[i] <<","<< Activity[i] << endl;
        }    
    file2.close();

    return 0;
}
